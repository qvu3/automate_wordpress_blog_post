#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const axios = require('axios');
const dotenv = require('dotenv');
const readline = require('readline');
const { program } = require('commander');
const wpAuth = require('./wordfence_auth');

// Load environment variables
dotenv.config();

// Get API keys and credentials from environment variables
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const WP_URL = process.env.WP_URL;
const WP_USERNAME = process.env.WP_USERNAME;
const WP_APP_PASSWORD = process.env.WP_APP_PASSWORD;

/**
 * Generate content using AI API (OpenAI or Claude)
 * @param {string} prompt - The prompt to send to the AI
 * @param {string} model - The AI model to use
 * @returns {Promise<string>} - The generated content
 */
async function generateContent(prompt, model = "gpt-3.5-turbo") {
  console.log(`Generating content with prompt: ${prompt}`);
  
  // Check if the prompt is asking for multiple blog posts
  const isMultiPostRequest = /write\s+(\d+|several|multiple|a few|some)\s+(blog posts|articles|posts)/i.test(prompt);
  
  // If it's a multi-post request, enhance the prompt to ensure clear separation
  let enhancedPrompt = prompt;
  if (isMultiPostRequest && !prompt.includes("separate each")) {
    enhancedPrompt = `${prompt}\n\nPlease format your response with clear separation between each blog post. Start each new blog post with "# Blog X:" or "# Article X:" (where X is the number), so they can be easily identified as separate posts.`;
  }
  
  // Determine which API to use based on the model name
  const isClaudeModel = model.toLowerCase().includes('claude');
  
  try {
    if (isClaudeModel) {
      // Claude API call
      console.log("Using Claude API with model:", model);
      
      // Format the model name correctly for Claude API
      // Claude API expects model names like "claude-3-5-sonnet-20240620"
      // But users might input "Claude 3.5 Sonnet 2024-10-22"
      let formattedModel = model;
      if (model.includes(' ')) {
        // Convert "Claude 3.5 Sonnet 2024-10-22" to "claude-3-5-sonnet-20241022"
        formattedModel = model.toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/\./g, '-')
          .replace(/(\d{4})-(\d{2})-(\d{2})/, '$1$2$3');
      }
      
      const response = await axios.post(
        'https://api.anthropic.com/v1/messages',
        {
          model: formattedModel,
          messages: [{ role: "user", content: enhancedPrompt }],
          max_tokens: 4000
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': ANTHROPIC_API_KEY,
            'anthropic-version': '2023-06-01'
          }
        }
      );
      
      // Check if the response has the expected structure
      if (response.data && response.data.content && response.data.content[0] && response.data.content[0].text) {
        return response.data.content[0].text;
      } else {
        console.log("Unexpected Claude API response structure:", JSON.stringify(response.data, null, 2));
        throw new Error("Unexpected Claude API response structure");
      }
    } else {
      // OpenAI API call
      console.log("Using OpenAI API with model:", model);
      const response = await axios.post(
        'https://api.openai.com/v1/chat/completions',
        {
          model: model,
          messages: [{ role: "user", content: enhancedPrompt }],
          temperature: 0.7,
          max_tokens: 2000
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${OPENAI_API_KEY}`
          }
        }
      );
      
      return response.data.choices[0].message.content;
    }
  } catch (error) {
    console.error('Error generating content:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('API response details:', JSON.stringify(error.response.data, null, 2));
    }
    throw new Error(`AI API error: ${error.message}`);
  }
}

/**
 * Format the generated content into a blog post
 * @param {string} content - The content generated by Claude
 * @param {string} title - Optional title for the blog post
 * @returns {Object} - Formatted blog post data
 */
function formatBlogPost(content, title = null) {
  // If no title is provided, use the first line as title
  if (!title) {
    const lines = content.split('\n');
    for (const line of lines) {
      if (line.trim()) {
        title = line.trim().replace(/#/g, '').trim();
        break;
      }
    }
  }
  
  // Basic formatting - you can enhance this as needed
  const formattedContent = content;
  
  return {
    title: title,
    content: formattedContent
  };
}

/**
 * Post content to WordPress using the REST API with cookie authentication
 * @param {Object} postData - The formatted blog post data
 * @param {string} status - The post status (draft, publish, etc.)
 * @returns {Promise<Object>} - The WordPress API response
 */
async function postToWordPress(postData, status = "draft") {
  console.log(`Posting to WordPress: ${postData.title}`);
  
  // Fix the WordPress API URL
  // If WP_URL contains /wp-admin, remove it to get the base site URL
  let baseUrl = WP_URL;
  if (baseUrl.includes('/wp-admin')) {
    baseUrl = baseUrl.split('/wp-admin')[0];
  }
  
  // Remove trailing slash if present
  if (baseUrl.endsWith('/')) {
    baseUrl = baseUrl.slice(0, -1);
  }
  
  console.log(`Using WordPress API URL: ${baseUrl}/wp-json/wp/v2/posts`);
  console.log(`Authenticating as: ${WP_USERNAME}`);
  
  try {
    // First, ensure we're logged in
    console.log("Checking WordPress login status...");
    
    // Load cookies if available
    wpAuth.loadCookies();
    
    // Log in if needed
    if (!wpAuth.cookieJar.cookies.length) {
      console.log("No saved cookies found. Logging in to WordPress...");
      const loggedIn = await wpAuth.loginToWordPress();
      if (!loggedIn) {
        throw new Error("Failed to log in to WordPress. Please run 'npm run login' first.");
      }
    }
    
    // Create the post using the cookie-based authentication
    console.log("Creating post with cookie authentication...");
    const result = await wpAuth.createPost(postData.title, postData.content, status);
    
    if (!result) {
      throw new Error("Failed to create post. Try running 'npm run login' to refresh your session.");
    }
    
    console.log("Post successful!");
    return result;
  } catch (error) {
    console.error('Error posting to WordPress:', error.message);
    
    if (error.response) {
      console.error('Status code:', error.response.status);
      console.error('Response data:', error.response.data);
      
      if (error.response.status === 404) {
        console.error('404 Not Found: The WordPress REST API endpoint could not be found.');
      } else if (error.response.status === 401) {
        console.error('401 Unauthorized: Authentication failed.');
        console.error("Please run 'npm run login' to log in to WordPress.");
      } else if (error.response.status === 403) {
        console.error('403 Forbidden: You do not have permission to create posts.');
      }
    }
    
    throw new Error(`WordPress API error: ${error.message}`);
  }
}

/**
 * Get user input from command line
 * @param {string} question - The question to ask
 * @returns {Promise<string>} - The user's input
 */
function askQuestion(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise(resolve => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

/**
 * Parse the generated content into multiple blog posts if needed
 * @param {string} content - The content generated by AI
 * @returns {Array<string>} - Array of blog post contents
 */
function parseMultipleBlogs(content) {
  // Check if we're using the hardcoded healthcare prompt
  // If so, always return as a single blog post regardless of content structure
  if (isUsingHealthcarePrompt) {
    console.log("Using healthcare prompt - treating as a single blog post");
    return [content];
  }
  
  // Look for patterns that might indicate separate blog posts
  // Common patterns include numbered headings, "Blog Post #X", "Article X", etc.
  
  // Check if content has multiple blog posts with clear separators
  const blogSeparators = [
    /(?=^#\s*Blog\s*(\d+|[A-Z]+))/gim,  // # Blog 1, # Blog A
    /(?=^#\s*Article\s*(\d+|[A-Z]+))/gim,  // # Article 1, # Article A
    /(?=^#\s*Post\s*(\d+|[A-Z]+))/gim,  // # Post 1, # Post A
    /(?=^Blog\s*(\d+|[A-Z]+)\s*:)/gim,  // Blog 1:, Blog A:
    /(?=^Article\s*(\d+|[A-Z]+)\s*:)/gim,  // Article 1:, Article A:
    /(?=^Post\s*(\d+|[A-Z]+)\s*:)/gim,  // Post 1:, Post A:
    /(?=^\d+\.\s*)/gm  // 1. , 2. (numbered lists)
  ];
  
  // Try each separator pattern
  for (const separator of blogSeparators) {
    const parts = content.split(separator).filter(part => part.trim());
    if (parts.length > 1) {
      console.log(`Detected ${parts.length} separate blog posts`);
      return parts;
    }
  }
  
  // If no clear separators are found but the content is very long,
  // it might still be multiple blogs without clear separation
  // In this case, we'll just return the original content as a single blog
  return [content];
}

/**
 * Process and post multiple blog posts
 * @param {Array<string>} blogContents - Array of blog post contents
 * @param {string} status - The post status (draft, publish, etc.)
 * @returns {Promise<Array<Object>>} - Array of WordPress API responses
 */
async function processMultipleBlogs(blogContents, status = "draft") {
  const results = [];
  
  for (let i = 0; i < blogContents.length; i++) {
    console.log(`\nProcessing blog post ${i + 1} of ${blogContents.length}`);
    
    // Format the blog post
    const postData = formatBlogPost(blogContents[i]);
    
    try {
      // Post to WordPress
      const result = await postToWordPress(postData, status);
      results.push(result);
      
      console.log(`Successfully posted blog ${i + 1}:`);
      console.log(`Post ID: ${result.id}`);
      console.log(`Post URL: ${result.link}`);
      console.log(`Status: ${result.status}`);
    } catch (error) {
      console.error(`Error posting blog ${i + 1}:`, error.message);
      results.push({ error: error.message });
    }
  }
  
  return results;
}

/**
 * Format the healthcare blog post using the template structure
 * @param {string} content - The content generated by AI
 * @returns {Object} - Formatted blog post data with title and content
 */
function formatHealthcarePost(content) {
  // Extract title and content sections
  const lines = content.split('\n');
  let title = '';
  
  // Find the title (usually the first non-empty line)
  for (const line of lines) {
    if (line.trim()) {
      title = line.trim().replace(/#/g, '').trim();
      break;
    }
  }
  
  // Extract sections from the content
  let introduction = '';
  let mainContent = '';
  let summary = '';
  let seoTags = '';
  
  // Simple parsing to extract sections
  const contentLower = content.toLowerCase();
  
  // Find introduction
  if (contentLower.includes('introduction')) {
    const introStart = content.indexOf('introduction', 0, 'i');
    const nextHeadingStart = content.indexOf('#', introStart + 1);
    if (nextHeadingStart > 0) {
      introduction = content.substring(introStart, nextHeadingStart).trim();
    } else {
      introduction = content.substring(introStart).trim();
    }
  }
  
  // Find main content (everything between introduction and summary/conclusion)
  const mainStart = introduction ? content.indexOf(introduction) + introduction.length : 0;
  const summaryStart = contentLower.includes('summary') 
    ? content.indexOf('summary', mainStart, 'i') 
    : (contentLower.includes('conclusion') ? content.indexOf('conclusion', mainStart, 'i') : content.length);
  
  if (summaryStart > mainStart) {
    mainContent = content.substring(mainStart, summaryStart).trim();
  } else {
    mainContent = content.substring(mainStart).trim();
  }
  
  // Find summary/conclusion
  if (contentLower.includes('summary')) {
    const sumStart = content.indexOf('summary', 0, 'i');
    summary = content.substring(sumStart).trim();
  } else if (contentLower.includes('conclusion')) {
    const conStart = content.indexOf('conclusion', 0, 'i');
    summary = content.substring(conStart).trim();
  }
  
  // Extract SEO tags if present
  if (contentLower.includes('seo tags') || contentLower.includes('tags:')) {
    const tagIndex = contentLower.includes('seo tags') 
      ? content.indexOf('seo tags', 0, 'i') 
      : content.indexOf('tags:', 0, 'i');
    
    if (tagIndex > 0) {
      const tagSection = content.substring(tagIndex);
      const tagLines = tagSection.split('\n').filter(line => line.trim());
      if (tagLines.length > 0) {
        // Extract tags, removing any "SEO Tags:" prefix
        seoTags = tagLines.join(' ').replace(/seo tags:?/i, '').trim();
      }
    }
  }
  
  // Format the content using the template structure
  const formattedContent = `
<!-- wp:gallery {"linkTo":"none"} -->
<figure class="wp-block-gallery has-nested-images columns-default is-cropped"><!-- wp:image {"id":5023,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img class="wp-image-5023" src="https://umedoc.com/wp-content/uploads/2025/03/AdobeStock_211391247.jpeg" alt="" />
<figcaption class="wp-element-caption">Healthcare and wellness concept.</figcaption>
</figure>
<!-- /wp:image --></figure>
<!-- /wp:gallery -->

<!-- wp:separator {"opacity":"css"} --><hr class="wp-block-separator has-css-opacity" /><!-- /wp:separator -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column {"width":"66.66%"} -->
<div class="wp-block-column" style="flex-basis: 66.66%;"><!-- wp:heading {"level":4,"fontSize":"large"} -->
<h4 class="wp-block-heading has-large-font-size">Introduction</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>${introduction.replace(/introduction:?/i, '').trim()}</p>
<!-- /wp:paragraph -->

${formatMainContent(mainContent)}

<!-- wp:image {"id":5024,"sizeSlug":"full","linkDestination":"none"} -->
<figure class="wp-block-image size-full"><img class="wp-image-5024" src="https://umedoc.com/wp-content/uploads/2025/03/AdobeStock_371638346.jpeg" alt="" />
<figcaption class="wp-element-caption">Healthcare and wellness strategies for better living.</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"> </p>
<!-- /wp:paragraph -->

<!-- wp:html --> <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9342944334127739" crossorigin="anonymous"></script> <ins class="adsbygoogle" style="display: block; text-align: center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-9342944334127739" data-ad-slot="9438483114"></ins> <script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script> <!-- /wp:html -->

<!-- wp:heading {"level":4,"fontSize":"large"} -->
<h4 class="wp-block-heading has-large-font-size">Conclusion</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>${summary.replace(/summary:?|conclusion:?/i, '').trim()}</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"fontSize":"medium"} -->
<p class="has-medium-font-size"> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"style":{"typography":{"fontSize":"27px"}}} -->
<p style="font-size: 27px;"><strong>Summary:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul>${formatSummaryPoints(summary)}</ul>
<!-- /wp:list -->

<!-- wp:separator {"opacity":"css"} --><hr class="wp-block-separator has-css-opacity" /><!-- /wp:separator -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column {"width":"25%"} -->
<div class="wp-block-column" style="flex-basis: 25%;"><!-- wp:image {"id":821,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><img class="wp-image-821" src="https://umedoc.com/wp-content/uploads/2020/06/Jim1-e1593109749582.png" alt="" /></figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column {"width":"50%"} -->
<div class="wp-block-column" style="flex-basis: 50%;"><!-- wp:heading {"level":5} -->
<h5 id="block-1e1e6687-cc66-4cd2-b33c-c7fb406c52e2" class="wp-block-heading"><strong>This article reviewed by Dr. Jim Liu, MD</strong>.</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="block-7f77556d-9f3b-429c-a2ab-51fa8a480471">There's nothing more important than our good health – that's our principal capital asset.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="block-04d0f33a-53ef-46de-bb65-cc7d9af43bdf"><strong><em>#medical #telehealth </em></strong><strong><em>#umedoc ${formatSEOTags(seoTags)}</em></strong></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns --></div>
<!-- /wp:column -->

<!-- wp:column {"width":"33.33%"} -->
<div class="wp-block-column" style="flex-basis: 33.33%;"><!-- wp:image {"id":2529,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large"><a href="https://prime.umedoc.com/auth/patient-sign-in"><img class="wp-image-2529" src="https://umedoc.com/wp-content/uploads/2022/02/blog-post-button.png" alt="" /></a></figure>
<!-- /wp:image -->

<!-- wp:separator {"opacity":"css"} --><hr class="wp-block-separator has-css-opacity" /><!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4 class="wp-block-heading">Recent Post</h4>
<!-- /wp:heading -->

<!-- wp:separator {"opacity":"css"} --><hr class="wp-block-separator has-css-opacity" /><!-- /wp:separator -->

<!-- wp:shortcode --> [recent-post] <!-- /wp:shortcode -->

<!-- wp:separator {"opacity":"css"} --><hr class="wp-block-separator has-css-opacity" /><!-- /wp:separator -->

<!-- wp:html --> <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9342944334127739" crossorigin="anonymous"></script> <!-- Side Ads - In Blog Articles --> <ins class="adsbygoogle" style="display: block;" data-ad-client="ca-pub-9342944334127739" data-ad-slot="2793205797" data-ad-format="auto" data-full-width-responsive="true"></ins> <script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script> <!-- /wp:html --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<p>&nbsp;</p>
<!-- /wp:paragraph -->
`;

  return {
    title: title,
    content: formattedContent
  };
}

/**
 * Format the main content section with proper WordPress blocks
 * @param {string} content - The main content section
 * @returns {string} - Formatted main content with WordPress blocks
 */
function formatMainContent(content) {
  // Split content by headings (lines starting with # or containing a colon)
  const sections = [];
  const lines = content.split('\n');
  let currentSection = '';
  let currentHeading = '';
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // Check if this is a heading
    if (trimmedLine.startsWith('#') || 
        (/^[A-Za-z0-9\s]+:/.test(trimmedLine) && !currentHeading)) {
      
      // Save the previous section if it exists
      if (currentHeading) {
        sections.push({ heading: currentHeading, content: currentSection.trim() });
      }
      
      // Start a new section
      currentHeading = trimmedLine.replace(/#/g, '').replace(/:$/, '').trim();
      currentSection = '';
    } else {
      // Add to current section
      currentSection += line + '\n';
    }
  }
  
  // Add the last section
  if (currentHeading && currentSection.trim()) {
    sections.push({ heading: currentHeading, content: currentSection.trim() });
  }
  
  // Format each section with WordPress blocks
  let formattedContent = '';
  
  for (const section of sections) {
    formattedContent += `
<!-- wp:heading {"level":4,"fontSize":"large"} -->
<h4 class="wp-block-heading has-large-font-size">${section.heading}</h4>
<!-- /wp:heading -->

${formatSectionContent(section.content)}
`;
  }
  
  return formattedContent;
}

/**
 * Format the content of a section with proper WordPress blocks
 * @param {string} content - The section content
 * @returns {string} - Formatted section content with WordPress blocks
 */
function formatSectionContent(content) {
  // Check if the content contains numbered items (1., 2., etc.)
  if (/^\d+\.\s/.test(content)) {
    // Format as numbered items with strong tags for item titles
    const items = content.split(/\n\d+\.\s/).filter(item => item.trim());
    let formattedItems = '';
    
    for (let i = 0; i < items.length; i++) {
      const item = items[i].trim();
      // Check if the item has a title (text before a colon or newline)
      const titleMatch = item.match(/^([^:]+)[:]/);
      
      if (titleMatch) {
        const title = titleMatch[1].trim();
        const itemContent = item.substring(titleMatch[0].length).trim();
        
        formattedItems += `
<!-- wp:paragraph -->
<p><strong>${i + 1}. ${title}:</strong><br />${itemContent}</p>
<!-- /wp:paragraph -->
`;
      } else {
        formattedItems += `
<!-- wp:paragraph -->
<p><strong>${i + 1}.</strong> ${item}</p>
<!-- /wp:paragraph -->
`;
      }
    }
    
    return formattedItems;
  } else if (content.includes('•') || content.includes('* ')) {
    // Format as bullet list
    const listItems = content
      .split(/\n[•*]\s/)
      .filter(item => item.trim())
      .map(item => `<!-- wp:list-item -->\n<li>${item.trim()}</li>\n<!-- /wp:list-item -->`);
    
    return `
<!-- wp:list -->
<ul>${listItems.join('\n')}</ul>
<!-- /wp:list -->
`;
  } else {
    // Format as regular paragraphs
    const paragraphs = content
      .split('\n\n')
      .filter(p => p.trim())
      .map(p => `<!-- wp:paragraph -->\n<p>${p.trim()}</p>\n<!-- /wp:paragraph -->`);
    
    return paragraphs.join('\n');
  }
}

/**
 * Format the summary points as a list
 * @param {string} summary - The summary content
 * @returns {string} - Formatted summary points as list items
 */
function formatSummaryPoints(summary) {
  // Extract bullet points or create them from the summary
  const summaryText = summary.replace(/summary:?|conclusion:?/i, '').trim();
  let points = [];
  
  // Check if the summary already has bullet points
  if (summaryText.includes('•') || summaryText.includes('* ')) {
    points = summaryText
      .split(/\n[•*]\s/)
      .filter(item => item.trim());
  } else if (summaryText.match(/\n\d+\.\s/)) {
    // Extract numbered points
    points = summaryText
      .split(/\n\d+\.\s/)
      .filter(item => item.trim());
  } else {
    // Create 4 summary points by splitting the text
    const sentences = summaryText
      .replace(/([.!?])\s+/g, '$1|')
      .split('|')
      .filter(s => s.trim());
    
    // Take up to 4 sentences for summary points
    points = sentences.slice(0, 4);
  }
  
  // Format as list items
  return points
    .map(point => `<!-- wp:list-item {"fontSize":"medium"} -->\n<li class="has-medium-font-size">${point.trim()}</li>\n<!-- /wp:list-item -->`)
    .join('\n');
}

/**
 * Format SEO tags for inclusion in the post
 * @param {string} tags - The SEO tags string
 * @returns {string} - Formatted SEO tags
 */
function formatSEOTags(tags) {
  if (!tags) return '';
  
  // Convert tags to hashtags
  return tags
    .split(/[,;]|\s+/)
    .filter(tag => tag.trim())
    .map(tag => {
      // Remove any existing hashtags and clean the tag
      const cleanTag = tag.trim().replace(/^#/, '').replace(/\s+/g, '');
      return cleanTag ? `#${cleanTag}` : '';
    })
    .filter(tag => tag) // Remove empty tags
    .join(' ');
}

/**
 * Main function
 */
async function main() {
  // Set up command line arguments
  program
    .option('--prompt <prompt>', 'Prompt for Claude')
    .option('--title <title>', 'Title for the blog post (optional)')
    .option('--model <model>', 'Claude model to use', 'claude-3-5-sonnet-20240620')
    .option('--status <status>', 'Post status (draft, publish, etc.)', 'draft')
    .option('--use-healthcare-prompt', 'Use the hardcoded healthcare prompt')
    .option('--use-template', 'Use the healthcare blog post template')
    .parse(process.argv);
  
  const options = program.opts();
  
  // Define the hardcoded healthcare prompt
  const healthcarePrompt = "Generate a new blog post on a random topic in Healthcare and Weightloss. Length: 300 - 500 words. Include SEO tags.";
  
  // Flag to track if we're using the healthcare prompt
  global.isUsingHealthcarePrompt = options.useHealthcarePrompt;
  global.isUsingTemplate = options.useTemplate;
  
  // If healthcare prompt option is specified, use the hardcoded prompt
  let prompt = options.useHealthcarePrompt ? healthcarePrompt : options.prompt;
  
  // If no prompt is provided and not using healthcare prompt, ask for input
  if (!prompt && !options.useHealthcarePrompt) {
    prompt = await askQuestion('Enter your prompt for generating the blog post(s): ');
  } else if (!prompt && options.useHealthcarePrompt) {
    prompt = healthcarePrompt;
    global.isUsingHealthcarePrompt = true;
  }
  
  try {
    // Generate content
    const content = await generateContent(prompt, options.model);
    
    // Parse content into multiple blog posts if needed
    const blogContents = parseMultipleBlogs(content);
    
    if (blogContents.length > 1 && !global.isUsingHealthcarePrompt) {
      // Process and post multiple blogs
      const results = await processMultipleBlogs(blogContents, options.status);
      
      console.log(`\nSummary: Posted ${results.length} blog posts to WordPress`);
      console.log(`Successfully posted: ${results.filter(r => !r.error).length}`);
      console.log(`Failed: ${results.filter(r => r.error).length}`);
    } else {
      // Process single blog post
      let postData;
      
      // Use the template formatting if specified
      if (global.isUsingTemplate) {
        console.log("Using healthcare blog post template...");
        postData = formatHealthcarePost(blogContents[0]);
      } else {
        postData = formatBlogPost(blogContents[0], options.title);
      }
      
      const result = await postToWordPress(postData, options.status);
      
      console.log('Successfully posted to WordPress!');
      console.log(`Post ID: ${result.id}`);
      console.log(`Post URL: ${result.link}`);
      console.log(`Status: ${result.status}`);
    }
  } catch (error) {
    console.error('Error:', error.message);
    process.exit(1);
  }
}

// Run the main function
main(); 